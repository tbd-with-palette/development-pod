{
  "metadata": {
    "name": "ds-tbd-example",
    "description": "",
    "labels": {
      "owner": "dspeers"
    }
  },
  "spec": {
    "version": "1.3.0",
    "template": {
      "type": "add-on",
      "cloudType": "all",
      "packs": [
        {
          "name": "code-server",
          "type": "manifest",
          "layer": "addon",
          "version": "1.0.0",
          "values": "pack:\n  spectrocloud.com/install-priority: \"0\"\n  namespace: \"code-server\"\n\nglobal:\n  ingress: ## @param ingress.enabled Enable ingress record generation for Jenkins\n\n  ##\n  enabled: true\n  ## @param ingress.pathType Ingress path type\n  ##\n  pathType: ImplementationSpecific\n  ## @param ingress.apiVersion Force Ingress API version (automatically detected if not set)\n  ##\n  apiVersion: \"\"\n  ## @param ingress.hostname Default host for the ingress record\n  ##\n  hostname: code-server.local\n  ## @param ingress.path Default path for the ingress record\n  ## NOTE: You may need to set this to '/*' in order to use this with ALB ingress controllers\n  ##\n  path: /",
          "registry": {
            "metadata": {
              "uid": "",
              "name": "",
              "kind": "",
              "isPrivate": false,
              "providerType": ""
            }
          },
          "manifests": [
            {
              "name": "pvc",
              "content": "apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  labels:\n    io.kompose.service: code-server-claim0\n  name: code-server-claim0\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 35Gi"
            },
            {
              "name": "service",
              "content": "apiVersion: v1\nkind: Service\nmetadata:\n  annotations:\n    kompose.cmd: kompose --file codeserver.yaml convert\n    kompose.version: 1.34.0 (HEAD)\n  labels:\n    io.kompose.service: code-server\n  name: code-server\nspec:\n  ports:\n    - name: \"8443\"\n      port: 8443\n      targetPort: 8443\n    - name: \"3000\"\n      port: 3000\n      targetPort: 3000\n  selector:\n    io.kompose.service: code-server"
            },
            {
              "name": "deployment",
              "content": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  annotations:\n    kompose.cmd: kompose --file codeserver.yaml convert\n    kompose.version: 1.34.0 (HEAD)\n  labels:\n    io.kompose.service: code-server\n  name: code-server\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      io.kompose.service: code-server\n  strategy:\n    type: Recreate\n  template:\n    metadata:\n      annotations:\n        kompose.cmd: kompose --file codeserver.yaml convert\n        kompose.version: 1.34.0 (HEAD)\n      labels:\n        io.kompose.service: code-server\n    spec:\n      initContainers:\n        - image: alpine:latest\n          name: alpine\n          command: [\"/bin/sh\"]\n          args:\n            - -c\n            - |\n              mkdir -p /config/workspace\n              chown 1000:1000 /config/workspace\n          volumeMounts:\n            - mountPath: /config\n              name: code-server-claim0\n        - image: alpine/git:latest\n          name: alpine-git\n          command: [\"/bin/sh\"]\n          args:\n            - -c\n            - |\n              cd /config/workspace\n              git clone https://github.com/tbd-with-pallete/web-example.git\n          volumeMounts:\n            - mountPath: /config\n              name: code-server-claim0\n          securityContext:\n            runAsUser: 1000\n            runAsGroup: 1000\n      containers:\n        - image: node:lts\n          name: node\n          command: [\"/bin/sh\"]\n          args: [\"-c\", \"cd /config/workspace/web-example/src/web-example && npm i && npm run dev -- --host \"]\n          ports:\n            - containerPort: 3000\n              protocol: TCP\n          volumeMounts:\n            - mountPath: /config\n              name: code-server-claim0\n        - env:\n            - name: DEFAULT_WORKSPACE\n              value: /config/workspace\n            - name: HASHED_PASSWORD\n            - name: PASSWORD\n              value: password\n            - name: PGID\n              value: \"1000\"\n            - name: PROXY_DOMAIN\n              value: code-server.local\n            - name: PUID\n              value: \"1000\"\n            - name: SUDO_PASSWORD\n              value: password\n            - name: SUDO_PASSWORD_HASH\n            - name: TZ\n              value: \"America/New_York\"\n            - name: GITHUB_TOKEN\n              value: \"{{.spectro.macro.github_token}}\"\n          image: lscr.io/linuxserver/code-server:latest\n          name: code-server\n          ports:\n            - containerPort: 8443\n              protocol: TCP\n          volumeMounts:\n            - mountPath: /config\n              name: code-server-claim0\n      restartPolicy: Always\n      volumes:\n        - name: code-server-claim0\n          persistentVolumeClaim:\n            claimName: code-server-claim0"
            },
            {
              "name": "ingress",
              "content": "apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  labels:\n    app: code-server\n    app.kubernetes.io/instance: code-server\n  name: code-server\n  namespace: code-server\nspec:\n  rules:\n  - host: code-server.local\n    http:\n      paths:\n        - pathType: Prefix\n          path: \"/\"\n          backend:\n            service:\n              name: code-server\n              port:\n                number: 8443\n  - host: code-dev.local\n    http:\n      paths:\n        - pathType: Prefix\n          path: \"/\"\n          backend:\n            service:\n              name: code-server\n              port:\n                number: 3000\nstatus:\n  loadBalancer: {}"
            }
          ]
        },
        {
          "name": "core-rest-server",
          "type": "manifest",
          "layer": "addon",
          "version": "1.0.0",
          "values": "pack:\n  spectrocloud.com/install-priority: \"0\"\n  namespace: \"code-server\"",
          "registry": {
            "metadata": {
              "uid": "",
              "name": "",
              "kind": "",
              "isPrivate": false,
              "providerType": ""
            }
          },
          "manifests": [
            {
              "name": "deployment",
              "content": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: core-rest-server\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      io.kompose.service: core-rest-server\n  template:\n    metadata:\n      labels:\n        io.kompose.service: core-rest-server\n    spec:\n      containers:\n        - image: vad1mo/hello-world-rest\n          name: core-rest-server\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    io.kompose.service: core-rest-server\n  name: core-rest-server\nspec:\n  ports:\n    - name: \"80\"\n      port: 80\n      targetPort: 5050\n  selector:\n    io.kompose.service: core-rest-server\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  labels:\n    app: core-rest-server\n    app.kubernetes.io/instance: code-server\n  name: core-rest-server\nspec:\n  rules:\n  - host: code-dev.local\n    http:\n      paths:\n        - pathType: Prefix\n          path: \"/api\"\n          backend:\n            service:\n              name: core-rest-server\n              port:\n                number: 5050\nstatus:\n  loadBalancer: {}"
            }
          ]
        }
      ]
    },
    "variables": []
  }
}
